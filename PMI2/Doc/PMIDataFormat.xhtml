<?xml version="1.0" encoding="iso-8859-1"?>
<?xml-stylesheet type="text/css" href="pmi.css"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN" 
		  "http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd"
		[ <!ENTITY mathml "http://www.w3.org/1998/Math/MathML"> ]>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
  <title>PMI Data Format</title>
  <meta name="Generator" content="/usr/bin/emacs" />
  <link rel="Copyright" href="pmi-gpl.xhtml" />
  <link rel="Start"     href="index.xhtml" />
  <!-- These three are for the benefit of HTML-only browsers -->
  <meta http-equiv="Content-Language" content="en-us" />
  <meta http-equiv="Content-Type" content="text/xml; charset=iso-8859-1" />
  <link rel="stylesheet" type="text/css"  href="pmi.css" />
  <style type="text/css">
    table   { margin: 1em; }

    caption { caption-side: bottom;
              text-align:   center;
              font-size:    small; }
  </style>
</head>
<!-- ====================================================================
     PMI Toolbox Documentation
     Copyright (C) 2004  Jonathan Stott
     
     This program is free software; you can redistribute it and/or
     modify it under the terms of the GNU General Public License
     as published by the Free Software Foundation; either version 2
     of the License, or (at your option) any later version.
     
     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
     
     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place - Suite 330, 
     Boston, MA  02111-1307, USA.
 ==================================================================== -->
<body>
<h1>PMI Data File Format</h1>

<p>
This file documents the data file format used in V2.0 of the PMI
toolbox.  Because it includes details about the experimental geometry
such as source and detector positions, this is the preferred format
for archiving instrument data.
</p>

<p>
The general format of the data file consists of two parts: a text
header followed by the binary data
(<a href="PMIDataFormat.xhtml#Figure1">see Figure 1</a>
for an example).  The text header is parsed line by
line.  Each line contains a single <code>keyword</code>=<code>value</code>
pair.  Blank lines are ignored.  Comments are introduced by the &quot;%&quot;
character and continue to the end of the current line.
</p>

<div id="Figure1" title="Sample PMI Data File">
<pre>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Data generated by the WhizBang CW Imager
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DetPos(1) = [  10  10   0 ]        % Four detectors
DetPos(2) = [  10 -10   0 ]
DetPos(3) = [ -10 -10   0 ]
DetPos(4) = [ -10  10   0 ]

SrcPos(1) = [   0   0   0 ]       % One Source

Lambda(1) = 690     % Two wavelengths
Lambda(2) = 830

Frequency = 0

DataPrecision = 'unsigned short'; % 16-bit data
DataType(1)   = { 'Amplitude' };  % data is an amplitude

% Each frame of binary data has eight measurements
Meas(1) = [ 1 1 1 ]
Meas(2) = [ 1 2 1 ]
Meas(3) = [ 1 3 1 ]
Meas(4) = [ 1 4 1 ]
Meas(5) = [ 1 1 2 ]
Meas(6) = [ 1 2 2 ]
Meas(7) = [ 1 3 2 ]
Meas(8) = [ 1 4 2 ]

% Begin experimental data, must contain an integer
%  number of frames of data
BeginData
</pre>
</div>

<h2>1. Text Keywords</h2>

<p>
There are a number of keywords that define the imager parameters and
the experimental geometry.  See 
<a href="PMIDataFormat.xhtml#Table1">Table&nbsp;1</a> for a complete list
of keywords.  PMI structured data files are read into the PMI toolbox
using the Matlab function <code>readPMIData()</code>.  This function
returns a PMI structure initialized using the information in the text
header and a matrix containing the data in the binary portion.  Most (but,
unfortunately, not all) the keywords were selected to have the same name
and meaning as the fields within the PMI structure.
</p>

<table id="Table1" border="1" style="float: right;">
  <tr>
    <th>Keyword</th>              <th>Description</th>
  </tr><tr>
    <td>%</td>                    <td>Introduces comment&mdash;ignored</td>
  </tr><tr>
    <td>SrcPos</td>               <td>Source position</td>
  </tr><tr>
    <td>DetPos</td>               <td>Detector position</td>
  </tr><tr>
    <td>ModFreq</td>              <td>Source modulation frequency</td>
  </tr><tr>
    <td>Lambda</td>               <td>Input wavelength (non-fluorescent)</td>
  </tr><tr>
    <td>ExcitationWavelength</td> <td>Input wavelength (fluorescence)</td>
  </tr><tr>
    <td>EmissionWavelength</td>   <td>Output wavelength (fluorescence)</td>
  </tr><tr>
    <td>TimeDelay</td>            <td>Electronic trigger delay</td>
  </tr><tr>
    <td>TimeGateWidth</td>        <td>Width of the time gate</td>
  </tr><tr>
    <td>CorrelationTime</td>      <td>Correlation time</td>
  </tr><tr>
    <td>ImagerOption</td>         <td>Support for non-standard extensions</td>
  </tr><tr>
    <td>Meas</td>                 <td>Declare measurement</td>
  </tr><tr>
    <td>DataPrecision</td>        <td>Data format</td>
  </tr><tr>
    <td>DataType</td>             <td>Specify data semantics</td>
  </tr><tr>
    <td>BeginData</td>            <td>End text header, begin binary data</td>
  </tr>
<caption>Table 1. Keywords used in the header portion of the PMI 
         data file</caption>
</table>

<h2 id="Section2">2. Imaging Parameters</h2>

<p>
Each of the imaging keywords (defined below) require an index number
as part of the keyword declaration (e.g., <code>SrcPos(1)</code> declares the
location of source one).  If there is exactly one possible value, the
index may be left off (<code>SrcPos</code>) and a value of `1' will
implicitly be used.  Imaging parameters may be declared in any order,
as long as they are defined before being used in a measurement.  If an
index is used more than once, the last declaration seen by the parser
will be used.  If an index is not used, the behavior of the parser is
undefined.
</p>

<p>
Keywords that are not applicable to a specific imager should not be
specified in the header.  There are <strong>no</strong> default values; fields
not mentioned in the header are left undefined.
</p>

<h3>2.1. Fiber Locations</h3>

<p>
The <code>SrcPos</code> and <code>DetPos</code> keywords define the position
of the source and detector optodes respectively.  Their argument is
the 
<math xmlns="&mathml;" display="inline">
  <mo>[</mo> <mi>x</mi> <mo>,</mo>
             <mi>y</mi> <mo>,</mo>
             <mi>z</mi> <mo>]</mo>
</math>
position of the optode (including the surrounding square brackets; the
separating commas are optional).  For example,
<pre>
SrcPos(1) = [ 0, 0, 0 ]
</pre>
declares the first source and defines it's located to be the origin of
the coordinate system.
</p>

<h3>2.2. Imager configuration</h3>

<p>
The <code>ModFreq</code> keyword defines the source modulation
frequency for frequency-domain imaging.  Its value should be given in
Megahertz.
</p>

<p>
The <code>ExcitationWavelength</code> and
<code>EmissionWavelength</code> keywords define the wavelength of the
light used for fluorescence imaging.  Their value should be given in
nanometers.  <code>Lambda</code> is used for non-fluorescence image.
Currently, <code>Lambda</code> and <code>ExcitationWavelength</code>
are completely equivalent.  This could change in the future, though,
so please use whichever keyword is appropriate for your specific
application (fluorescence or non-fluorescence imaging).
</p>

<p>
The keywords <code>TimeDelay</code>, <code>TimeGateWidth</code>, and
<code>CorrelationTime</code> are used with time-domain imagers.  Their
values should be specified in seconds.  <code>TimeDelay</code>
specifies the electronic delay introduced between the source pulse and
the start of data collection.  <code>TimeGateWidth</code> specifies
either the gate width of a gated time-domain imager or the bin width
of a photon counting system.  <code>CorrelationTime</code> is the
correlation time for systems that return that information.
</p>

<h3>2.3. Other Configuration Parameters</h3>

<p>
The <code>DataType</code> keyword is covered
<a href="PMIDataFormat.xhtml#Section4">below</a>.
</p>

<p>
The final imaging parameter, <code>ImagerOption</code>, is special.
The argument to <code>ImagerOption</code> is a text string enclosed in
single quotes and surrounded by curly brackets &quot;{}&quot;.
<code>ImagerOption</code> is stored in the PMI structure as a text
string&mdash;no attempt is made to assign any special meaning to the
argument.  The intended use of <code>ImagerOption</code> is two-fold.
First, it provides a stop-gap means to record essential imager data
until the PMI toolbox can be extended with the appropriate fields.
Second, it provides a means for the imager to include information that
is important enough to be worth record, but will not be used to
calculate the forward problem (e.g., sampling rate for time-course
data).
</p>

<h2>3. Measurement Lists</h2>

<p>
The measurement list holds the mapping between the individual data
elements and the various imaging parameters
(<a href="PMIDataFormat.xhtml#Section2">Section&nbsp;2</a>).  Every
data element <strong>must</strong> have a corresponding
<code>Meas</code> declaration.  While measurements and imager option
may be interleaved, we recommend placing measurements at the end of
the file (after the imager parameters) for the sake of clarity.
</p>

<p>
Each measurement is declared using the <code>Meas</code> keyword; its
argument is a list of indices into the imager parameters, surrounded
by square brackets, e.g.
<pre>
Meas(3) = [ 1 3 5 ]
</pre>
The first two fields (with values of `1' and `3' in the example above)
are always the index of the source and detector respectively.  The
meaning of the remaining fields depends on which of the imaging
parameters are defined (hence the recommendation to put the
measurements after the imaging parameters).  <em>Imaging parameters
(except source and detector index) are not included in the measurement
list unless they can take at least two possible values.</em>  In the
<a href="PMIDataFormat.xhtml#Figure1">example file</a>, the three fields
in the measurement list are <code>SrcPos</code>, <code>DetPos</code>,
and <code>Lambda</code>.  <code>ModFreq</code> is not a field in the
measurement list because it only has a single defined value.
</p>

<p>
While the do not need to be defined in order, there must not be any
gaps in the final list of measurements.  That is, if
<code>Meas(10)</code> is declared in the file, measurements
<code>Meas(1)</code> through <code>Meas(9)</code> must also be
declared somewhere in the file.  The behavior of the toolbox when
presented with an incomplete measurement list is undefined.
</p>

<p>
The order of the fields is fixed
(<a href="PMIDataFormat.xhtml#Table2">see Table&nbsp;2</a>).  After
reading the entire text header, the parser pads out the given measurements
into a full measurement list.  Undeclared fields are assigned a value
of `0'.  Fields that take a single value are implicitly set to `1' and
should not be explicitly declared inside a <code>Meas</code> statement.
</p>

<table id="Table2" border="1" style="float: left;">
  <tr>
    <th>Field #</th>
    <th>Index Into</th>
  </tr>
  <tr><td> 1 </td><td> Source Position       </td></tr>
  <tr><td> 2 </td><td> Detector Position     </td></tr>
  <tr><td> 3 </td><td> Modulation Frequency  </td></tr>
  <tr><td> 4 </td><td> Source  Wavelength    </td></tr>
  <tr><td> 5 </td><td> Emission Wavelength   </td></tr>
  <tr><td> 6 </td><td> Delay Time            </td></tr>
  <tr><td> 7 </td><td> Gate Width            </td></tr>
  <tr><td> 8 </td><td> Correlation Time      </td></tr>
  <tr><td> 9 </td><td> Data Type             </td></tr>

  <caption>Table 2. Ordering of fields within a measurement
  declaration.</caption>
</table>

<h2 id="Section4">4. Data Parameters</h2>

<p>
There are three parameters that define the formatting of the data in
the binary portion of the file.  The first,
<code>DataPrecision</code>, specifies the binary format of the data.
It's value is any of the precision strings understood by Matlab (for
example `float32'; type <code>help fread</code> to get a complete list
of precision strings).  All measurements are assumed to have the same
precision.  The default data precision is `float32', which corresponds
to C's built-in ``float'' data type.
</p>

<p>
The second data parameter keyword is <code>DataType</code> which gives
the semantic content of the data.  That is to say,
<code>DataType</code> tells the toolbox what meaning should be
assigned to data as it is read in.  Similar to
<code>ImagerOption</code>, <code>DataType</code> is
followed by an index in parenthesis and its argument is enclosed in
single quotes, surrounded by a pair of curly brackets.  <strong>This
option is not yet implemented by the toolbox.</strong>
<code>DataType</code> does not have a default value.  Possible
arguments to <code>DataType</code> are given in
<a href="PMIDataFormat.xhtml#Table3">Table&nbsp;3</a>.
</p>

<p>
The final keyword is <code>BeginData</code>.  This keyword takes no
arguments and signals the parser that it has reached the end of the
text header.  The data portion begins immediately after the closing
newline.
</p>

<h2>5. Binary Data</h2>

<p>
Data is stored in the binary portion of the file in one or more
frames.  A frame is defined as a complete set of measurements, as
specified using <code>Meas</code>.  The size of each data element is
given by <code>DataPrecision</code>.  Frames are read sequentially;
the data portion of the file must contain an integer number of data
frames.  The data portion ends when the file ends.
</p>

<table id="Table3" border="1">
<tr>
  <th>Type</th>
  <th> Description</th>
</tr>
<tr><td> Amplitude   </td><td> Amplitude data </td></tr>
<tr><td> Phase       </td><td> Phase data </td></tr>
<tr><td> I           </td><td> Real part of signal </td></tr>
<tr><td> Q           </td><td> Imaginary part of signal </td></tr>
<tr><td> IQ          </td><td> Complex storage (real,imaginary) </td></tr>
<tr><td> Real        </td><td> Same as `I' </td></tr>
<tr><td> Imaginary   </td><td> Same as `Q' </td></tr>
<tr><td> Complex     </td><td> Same as 'IQ' </td></tr>
<tr><td> AmpStdErr   </td><td> Standard deviation of amplitude data </td></tr>
<tr><td> PhaseStdErr </td><td> Standard deviation of phase data </td></tr>
<tr><td> IQStdErr    </td><td> Standard deviation of I/Q data </td></tr>
<caption>Table 3. Possible values of <code>DataType</code></caption>
</table>

<div class="Footer">
  <hr />
  <div class="linkblk" style="text-align: left">
    <a href="index.html">First Page</a>
  </div>
  <div class="linkblk" style="text-align: center">
    <a href="pmi-toc.xhtml">Table of Contents</a>
  </div>
  <div class="linkblk" style="text-align: right">
    <a href="pmi-gpl.xhtml">Copyright</a>
  </div>
</div>

</body>
</html>

