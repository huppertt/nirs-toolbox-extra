% PMITOFD  Turn PMI structures into tFDimg config files
%
% PMItoFD(SD, Medium, basename, nPh, segfile);
%
% NOTE: Currently ignores the measurement list, so some unnecessary
% source or detector settings might be generated.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Copyright (C) 2003, David Boas, Dana Brooks, Rick Gaudette, 
%                     Tom Gaudette, Eric Miller, Quan Zhang,
%                     Jonathan Stott
%
% This program is free software; you can redistribute it and/or
% modify it under the terms of the GNU General Public License
% as published by the Free Software Foundation; either version 2
% of the License, or (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function PMItoFD(SD, Medium, basefile, nPh, segfile)

% Reseed the random number generator
rand('state',sum(100*clock));

ns = fldlen(SD, 'SrcPos',  1);
nd = fldlen(SD, 'DetPos',  1);
nl = fldlen(SD, 'Lambda',  2);
nf = fldlen(SD, 'ModFreq', 2);

if (ns > 0)
   for ii = 1:ns
      if (nf > 0)
	 for jj = 1:nf
	    if (nl > 0)
	       for kk = 1:nl
		  filename = sprintf('%sS%dF%dL%d.cfg', basefile, ii, jj, kk);
		  DumpCfgS(filename, SD, Medium, ii, jj, kk, nPh, segfile);
	       end
	    else
	       filename = sprintf('%sS%dF%d.cfg', basefile, ii, jj);
	       DumpCfgS(filename, SD, Medium, ii, jj, 0, nPh, segfile);
	    end
	 end
      else
	 if (nl > 0)
	    filename = sprintf('%sS%dL%d.cfg', basefile, ii, kk);
	    DumpCfgS(filename, SD, Medium, ii, 0, kk, nPh, segfile);
	 else
	    filename = sprintf('%sS%d.cfg', basefile, ii);
	    DumpCfgS(filename, SD, Medium, ii, 0, 0, nPh, segfile);
	 end
      end
   end
end

if (nd > 0)
   for ii = 1:nd
      if (nf > 0)
	 for jj = 1:nf
	    if (nl > 0)
	       for kk = 1:nl
		  filename = sprintf('%sD%dF%dL%d.cfg', basefile, ii, jj, kk);
		  DumpCfgD(filename, SD, Medium, ii, jj, kk, nPh, segfile);
	       end
	    else
	       filename = sprintf('%sD%dF%d.cfg', basefile, ii, jj);
	       DumpCfgD(filename, SD, Medium, ii, jj, 0, nPh, segfile);
	    end
	 end
      else
	 if (nl > 0)
	    filename = sprintf('%sD%dL%d.cfg', basefile, ii, kk);
	    DumpCfgD(filename, SD, Medium, ii, 0, kk, nPh, segfile);
	 else
	    filename = sprintf('%sD%d.cfg', basefile, ii);
	    DumpCfgD(filename, SD, Medium, ii, 0, 0, nPh, segfile);
	 end
      end
   end
end

return;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Get the length of the field along the specified matrix column

function[N] = fldlen(SD, fld, idx)

if (isfield(SD, fld))
   F = getfield(SD, fld);
   N = size(F, idx);
else
   N = 0;
end

return;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Dump a configuration file

function DumpCfgS(filename, SD, Medium, iSrc, iFrq, iLmb, nPh, segfile)

fid = fopen(filename, 'wt');
if (fid < 0)
   error(['Error opening file ' filename ]);
end

DumpCfgX(fid, SD, Medium, iFrq, iLmb, nPh, segfile);

fprintf(fid, '\nsource { ');
fprintf(fid, '\tpos = [ %f %f %f ]\n', ...
	10*SD.SrcPos(iSrc,1), 10*SD.SrcPos(iSrc,2), 10*SD.SrcPos(iSrc,3));
fprintf(fid, '\tdir = [ 0 0 1 ] ');
fprintf(fid, '}\n');

for iDet = 1:size(SD.DetPos,1)
   fprintf(fid, '\ndetector { ');
   fprintf(fid, 'pos = [ %f %f %f ]\n', ...
	10*SD.DetPos(iDet,1), 10*SD.DetPos(iDet,2), 10*SD.DetPos(iDet,3));
   fprintf(fid, '\tdir = [ 0 0 -1 ] radius = 1 ');
   fprintf(fid, '}\n');
end

fclose(fid);

return;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function DumpCfgD(filename, SD, Medium, iDet, iFrq, iLmb, nPh, segfile)

fid = fopen(filename, 'wt');
if (fid < 0)
   error(['Error opening file ' filename ]);
end

DumpCfgX(fid, SD, Medium, iFrq, iLmb, nPh, segfile);

fprintf(fid, '\nsource { ');
fprintf(fid, '\tpos = [ %f %f %f ]\n', ...
	10*SD.DetPos(iDet,1), 10*SD.DetPos(iDet,2), 10*SD.DetPos(iDet,3));
fprintf(fid, '\tdir = [ 0 0 -1 ]');
fprintf(fid, '}\n');

for iSrc = 1:size(SD.SrcPos,1)
   fprintf(fid, '\ndetector { ');
   fprintf(fid, 'pos = [ %f %f %f ]\n', ...
	10*SD.SrcPos(iSrc,1), 10*SD.SrcPos(iSrc,2), 10*SD.SrcPos(iSrc,3));
   fprintf(fid, '\tdir = [ 0 0 1 ] radius = 1 ');
   fprintf(fid, '}\n');
end

fclose(fid);

return;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function DumpCfgX(fid, SD, Medium, iFrq, iLmb, nPh, segfile);

fprintf(fid, '; Generated by PMItoMC()\n');
fprintf(fid, 'nphotons = %12d\n', nPh);

% Force this to print an integer somehow
fprintf(fid, 'seed     = %9d\n', floor(-314159265 * rand(1,1)));

if (iFrq > 0)
   fprintf(fid, 'freq = %d\n', SD.ModFreq(iFrq));
else
   fprintf(fid, 'freq = 0\n');
end

nt = fldlen(SD, 'TimeDelay',     1);

if (nt > 0)
    fprintf(fid, '\n; Modify time gates as needed\n');

    fprintf(fid, 'gate_width = %e\n', SD.TimeGateWidth(1));

    fprintf(fid, 'start_time = %e\n', min(SD.TimeDelay-SD.TimeGateWidth(1)));

    ng = ceil((max(SD.TimeDelay) - min(SD.TimeDelay))/SD.TimeGateWidth(1));
    fprintf(fid, 'ngate      = %d\n', ng);
else
    fprintf(fid, 'start_time = 0e-9\n');
    fprintf(fid, 'gate_width = 5e-9\n');
    fprintf(fid, 'ngate      = 1\n');
end

fprintf(fid, 'segfile    = %s\n', segfile);

if (~strcmp(Medium.CompVol.Type,'uniform'))
   error('Only CompVol.Type == uniform is supported');
end

nx = ceil((max(Medium.CompVol.X)-min(Medium.CompVol.X))/Medium.CompVol.XStep)+1;
ny = ceil((max(Medium.CompVol.Y)-min(Medium.CompVol.Y))/Medium.CompVol.YStep)+1;
nz = ceil((max(Medium.CompVol.Z)-min(Medium.CompVol.Z))/Medium.CompVol.ZStep)+1;

fprintf(fid, 'dx    = %f\n', Medium.CompVol.XStep*10);
fprintf(fid, 'dy    = %f\n', Medium.CompVol.YStep*10);
fprintf(fid, 'dz    = %f\n', Medium.CompVol.ZStep*10);
fprintf(fid, 'nxvox = %d\n', nx);
fprintf(fid, 'nyvox = %d\n', ny);
fprintf(fid, 'nzvox = %d\n', nz);
fprintf(fid, 'img_x = %d %d\n', 0, nx-1);
fprintf(fid, 'img_y = %d %d\n', 0, ny-1);
fprintf(fid, 'img_z = %d %d\n', 0, nz-1);

fprintf(fid, '\ntissue { ');
fprintf(fid, '\tmua = %5f ', Medium.Muao(iLmb) / 10);
fprintf(fid, '\tmus = %5f\n', Medium.Muspo(iLmb) / 10);
fprintf(fid, '\tg   = 0.0 ', 0.0);
fprintf(fid, '\tn   = %4f ', Medium.idxRefr(iLmb));
fprintf(fid, '}\n');

fprintf(fid, '\n\n; Replace this with your remaining tissue types\n\n');

return;

