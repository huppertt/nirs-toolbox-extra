% READMCHIS  Load history file generated by tMCimg
%
% [fluence, nPhoton] = readMCHis(filenm, muas);
%
% Read the History file generated by tMCimg, determine the
% number of photons received at each detector, and calculate the
% fluence at each detector based on the given absorption
% coefficient of each tissue type and the modulation frequency
%
% filenm - The file name of the history file with out the
%          .his extention.  The .inp file of the same name must
%          also be present
%
% muas   - The mua of each tissue type.  Each tissue type is
%          a different column.  Rows can be added to perform
%          the fluence calculation simultaneously for different
%          sets of absorption coefficients. Units are 1/cm, not 1/mm!.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Copyright (C) 2004, David Boas, Dana Brooks, Rick Gaudette, 
%                     Tom Gaudette, Eric Miller, Quan Zhang,
%                     Jonathan Stott
%
% This program is free software; you can redistribute it and/or
% modify it under the terms of the GNU General Public License
% as published by the Free Software Foundation; either version 2
% of the License, or (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [fluence, nPhoton] = readMCHis(filenm, muas)

mc = MCConfig(filenm);

clight0 = 2.99792458e11; % mm/s

if (length(mc.freq) ~= 1)
   warning('Multiple frequencies are not supported');
   keyboard;
else
   w = 2*pi*mc.freq;

   % Assumes freq is a scalar
   wv = mc.tis(:,4)*(w/clight0);         % n\omega/c
end

if (size(muas,2) ~= mc.nTissue)
   error('Number of mu''s does not match number of tissue types');
end

% Turn muas into 1/mm to match the photon path lengths
muas = muas / 10;

% Allocate the storage arrays

if (mc.nDet(1) == 0)
   warning('readMCHis requires at least one defined detector');
   keyboard;
elseif (mc.nTstep == 0)
   warning('readMCHis requires at least one time gate');
   keyboard;
else
   len = zeros(mc.nTissue, mc.nTstep, mc.nDet(1));
   num = zeros(mc.nTstep, mc.nDet(1));
end
   
[fid, errmsg] = fopen([ filenm '.his' ], 'rb');

if (fid < 0)
   error([ 'Error opening file "' filenm '.his" - ' errmsg ]);
end

% There's no reason to load the entire file into memory when
% I can just go through and sum it all up in a single pass.
%
% The downside is that loading the records one at a time is
% noticably slower than the old way.

% 1 field for detector, 1 for gate index, n tissue types
nfields = 1 + 1 + mc.nTissue;

phi = zeros(mc.nTstep, mc.nDet(1), size(muas,1));
num = zeros(mc.nTstep, mc.nDet(1));

K   = muas - i*wv(1,:);  % complex wave-vector

while (feof(fid) == 0)
   [data, nread] = fread(fid, nfields, 'float32');

   if (nread ~= nfields)
      % At eof but not caught by feof()
      break;
   end
   
   detidx = data(1) + 1;
   tmidx  = data(2) + 1;
   
   % fluence at detector for this one photon, un-normalized
   dphi = exp(-K .* data(3:end)');

   phi(tmidx,detidx,:) = phi(tmidx,detidx,:) + ...
                             reshape(dphi', 1, 1, length(dphi));

   num(tmidx,detidx)   = num(tmidx,detidx) + 1;
end

fclose(fid);

% Normalization result and copy back
%   mc.nDet(2) == radius
% Turn detector radius from mm to cm

total_flux = (pi * (mc.nDet(2)/10)^2) * (mc.maxT - mc.minT);

fluence = phi / total_flux;

% Don't divide by zero - if no photons detected, then phi is already zero
% so this is safe.

fluence = phi ./ max(num,1);

nPhoton = num;

return;
